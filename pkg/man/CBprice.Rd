% Generated by roxygen2 (4.0.1): do not edit by hand
\name{CBpriceCouponWrapper}
\alias{CBfindCoupon}
\alias{CBprice}
\alias{CBpriceCouponWrapper}
\alias{CBpriceDividendWrapper}
\title{Convertible bond pricing.}
\usage{
CBpriceCouponWrapper(couponRate, S_0, sigma, intRate0, creditSpread,
  rateCompounding, couponFreq, dividendProtectionRate, rngDividendSchedule,
  conversionRatio, noConversionPeriod, americanConversionType, maturity,
  faceValue, redemtionPremium = 0, softCallStartTime = 0,
  softCallBarrier = 0, softCallStrike = 0, putStartTime = 0,
  putStrike = 0, callStartTime = 0, callStrike = 0, nbStepsPerYear = 0)

CBpriceDividendWrapper(rngDividendSchedule, S_0, sigma, intRate0, creditSpread,
  rateCompounding, couponRate, couponFreq, dividendProtectionRate,
  conversionRatio, noConversionPeriod, americanConversionType, maturity,
  faceValue, redemtionPremium = 0, softCallStartTime = 0,
  softCallBarrier = 0, softCallStrike = 0, putStartTime = 0,
  putStrike = 0, callStartTime = 0, callStrike = 0, nbStepsPerYear = 0)

CBprice(S_0, sigma, riskFreeInterestRate, creditSpread, rateCompounding,
  couponRate, couponFreq, dividendProtectionRate, dividendSchedule,
  conversionRatio, noConversionPeriod, americanConversionType, maturity,
  faceValue, redemptionPremium = 0, softCallStartTime = 0,
  softCallBarrier = 0, softCallStrike = 0, putStartTime = 0,
  putStrike = 0, callStartTime = 0, callStrike = 0, nbStepsPerYear = 50)

CBfindCoupon(S_0, sigma, intRate0, creditSpread, rateCompounding, couponFreq,
  dividendProtectionRate, RDividendSchedule, conversionRatio,
  noConversionPeriod, americanConversionType, maturity, faceValue,
  redemptionPremium = 0, softCallStartTime = 0, softCallBarrier = 0,
  softCallStrike = 0, putStartTime = 0, putStrike = 0,
  callStartTime = 0, callStrike = 0, nbStepsPerYear = 50,
  targetBondPrice = 1)
}
\arguments{
\item{S_0}{underlying initial price}

\item{sigma}{annualised implied volatility of the underlying}

\item{riskFreeInterestRate}{risk free rate}

\item{creditSpread}{spread to risk free rate}

\item{rateCompounding}{basis for discount rate. annual = 1, semi-annual = 2, etc. For the continious basis use rateCompounding = 0.}

\item{couponRate}{coupon on bond}

\item{couponFreq}{numer of coupons per year. Usually twice a year.}

\item{dividendProtectionRate}{divident protection threshold. In the uderlying model dividend protection implemented
via adjustment to conversion rate (Dividend protection is almost always provided by an adjustment to the conversion price
or conversion ratio).}

\item{dividendSchedule}{dividend schedule 2-column matrix. 1-column - time to dividend, 2-column - dividend rate. See demos in /demo.}

\item{conversionRatio}{number of shares per one convertible bond}

\item{noConversionPeriod}{restriction for conversion in years.}

\item{americanConversionType}{type of the conversion option. In almost all cases it is american. So we can convert any time. Set =0 if conversion possible only at maturity.}

\item{maturity}{maturity of the convertible}

\item{faceValue}{nominal amount of convertible bond}

\item{redemptionPremium}{premium at conversion. For example issuer can pay premium 10 percent of the faceValue at maturity to the holder (at redemtion).
If so set parameter = 0.1. In almost all cases there is no redemption premium.}

\item{softCallStartTime}{time at which issuer will be able to start apply soft call option.}

\item{softCallBarrier}{level of equity price at which softCall can be applied. For example, 130 means:
if price of equity will be greater 130, issuer can call CB at softCallStrike price}

\item{softCallStrike}{soft call option strike in percents of faceValue. Set to 0 if there is no option.}

\item{putStartTime}{time at which holder will be able to start apply put option.}

\item{putStrike}{put option strike in percents of faceValue. Set to 0 if there is no option.}

\item{callStartTime}{time at which issuer will be able to start apply put option.}

\item{callStrike}{call option strike in percents of faceValue. Set to 0 if there is no option.}

\item{nbStepsPerYear}{number of steps in binomial computational grid per year)}
}
\value{
price of convertible
}
\description{
Convertible bond pricing.

#'
}
\section{Functions}{
\itemize{
\item \code{}: CBpriceCouponWrapper wrapper of CBprice for usage in uniroot function.
This is useful we want to find coupon level for a given convertible bond specs. Particulary useful for issuance of CB.

\item \code{}: CBpriceDividendWrapper wrapper of CBprice for usage in uniroot function.
This is useful we want to find dividend level for a given convertible bond

\item \code{}: CBfindCoupon can be used for determining coupon at issuance of CB. This also can be done with
CBpriceCouponWrapper and uniroot, but CBfindCoupon a little bit faster because of R interpreter overheads in uniroot.
CBfindCoupon written in pure C++. Both methods use the same zeroin implementation of finding root of given function.
Initially this function was written for using in MS Excel spreadsheets wrapper of this package bacause of lack of fast
optimizer in ms excel.
Please see examples proveded in /demo.
}}

