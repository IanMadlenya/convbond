// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CBprice
double CBprice(double S_0, double sigma, double riskFreeInterestRate, double creditSpread, double rateCompounding, double couponRate, double couponFreq, double dividendProtectionRate, NumericMatrix RDividendSchedule, double conversionRatio, double noConversionPeriod, double americanConversionType, double maturity, double faceValue, double redemptionPremium, double softCallStartTime, double softCall, double softCallStrike, double putStartTime, double putStrike, double callStartTime, double callStrike, double nbStepsPerYear);
RcppExport SEXP convbond_CBprice(SEXP S_0SEXP, SEXP sigmaSEXP, SEXP riskFreeInterestRateSEXP, SEXP creditSpreadSEXP, SEXP rateCompoundingSEXP, SEXP couponRateSEXP, SEXP couponFreqSEXP, SEXP dividendProtectionRateSEXP, SEXP RDividendScheduleSEXP, SEXP conversionRatioSEXP, SEXP noConversionPeriodSEXP, SEXP americanConversionTypeSEXP, SEXP maturitySEXP, SEXP faceValueSEXP, SEXP redemptionPremiumSEXP, SEXP softCallStartTimeSEXP, SEXP softCallSEXP, SEXP softCallStrikeSEXP, SEXP putStartTimeSEXP, SEXP putStrikeSEXP, SEXP callStartTimeSEXP, SEXP callStrikeSEXP, SEXP nbStepsPerYearSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type S_0(S_0SEXP );
        Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< double >::type riskFreeInterestRate(riskFreeInterestRateSEXP );
        Rcpp::traits::input_parameter< double >::type creditSpread(creditSpreadSEXP );
        Rcpp::traits::input_parameter< double >::type rateCompounding(rateCompoundingSEXP );
        Rcpp::traits::input_parameter< double >::type couponRate(couponRateSEXP );
        Rcpp::traits::input_parameter< double >::type couponFreq(couponFreqSEXP );
        Rcpp::traits::input_parameter< double >::type dividendProtectionRate(dividendProtectionRateSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type RDividendSchedule(RDividendScheduleSEXP );
        Rcpp::traits::input_parameter< double >::type conversionRatio(conversionRatioSEXP );
        Rcpp::traits::input_parameter< double >::type noConversionPeriod(noConversionPeriodSEXP );
        Rcpp::traits::input_parameter< double >::type americanConversionType(americanConversionTypeSEXP );
        Rcpp::traits::input_parameter< double >::type maturity(maturitySEXP );
        Rcpp::traits::input_parameter< double >::type faceValue(faceValueSEXP );
        Rcpp::traits::input_parameter< double >::type redemptionPremium(redemptionPremiumSEXP );
        Rcpp::traits::input_parameter< double >::type softCallStartTime(softCallStartTimeSEXP );
        Rcpp::traits::input_parameter< double >::type softCall(softCallSEXP );
        Rcpp::traits::input_parameter< double >::type softCallStrike(softCallStrikeSEXP );
        Rcpp::traits::input_parameter< double >::type putStartTime(putStartTimeSEXP );
        Rcpp::traits::input_parameter< double >::type putStrike(putStrikeSEXP );
        Rcpp::traits::input_parameter< double >::type callStartTime(callStartTimeSEXP );
        Rcpp::traits::input_parameter< double >::type callStrike(callStrikeSEXP );
        Rcpp::traits::input_parameter< double >::type nbStepsPerYear(nbStepsPerYearSEXP );
        double __result = CBprice(S_0, sigma, riskFreeInterestRate, creditSpread, rateCompounding, couponRate, couponFreq, dividendProtectionRate, RDividendSchedule, conversionRatio, noConversionPeriod, americanConversionType, maturity, faceValue, redemptionPremium, softCallStartTime, softCall, softCallStrike, putStartTime, putStrike, callStartTime, callStrike, nbStepsPerYear);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CBfindCoupon
double CBfindCoupon(double S_0, double sigma, double intRate0, double creditSpread, double rateCompounding, double couponFreq, double dividendProtectionRate, NumericMatrix RDividendSchedule, double conversionRatio, double noConversionPeriod, double americanConversionType, double maturity, double faceValue, double redemptionPremium, double softCallStartTime, double softCall, double softCallStrike, double putStartTime, double putStrike, double callStartTime, double callStrike, double nbStepsPerYear, double targetBondPrice = 1.0);
RcppExport SEXP convbond_CBfindCoupon(SEXP S_0SEXP, SEXP sigmaSEXP, SEXP intRate0SEXP, SEXP creditSpreadSEXP, SEXP rateCompoundingSEXP, SEXP couponFreqSEXP, SEXP dividendProtectionRateSEXP, SEXP RDividendScheduleSEXP, SEXP conversionRatioSEXP, SEXP noConversionPeriodSEXP, SEXP americanConversionTypeSEXP, SEXP maturitySEXP, SEXP faceValueSEXP, SEXP redemptionPremiumSEXP, SEXP softCallStartTimeSEXP, SEXP softCallSEXP, SEXP softCallStrikeSEXP, SEXP putStartTimeSEXP, SEXP putStrikeSEXP, SEXP callStartTimeSEXP, SEXP callStrikeSEXP, SEXP nbStepsPerYearSEXP, SEXP targetBondPriceSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type S_0(S_0SEXP );
        Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< double >::type intRate0(intRate0SEXP );
        Rcpp::traits::input_parameter< double >::type creditSpread(creditSpreadSEXP );
        Rcpp::traits::input_parameter< double >::type rateCompounding(rateCompoundingSEXP );
        Rcpp::traits::input_parameter< double >::type couponFreq(couponFreqSEXP );
        Rcpp::traits::input_parameter< double >::type dividendProtectionRate(dividendProtectionRateSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type RDividendSchedule(RDividendScheduleSEXP );
        Rcpp::traits::input_parameter< double >::type conversionRatio(conversionRatioSEXP );
        Rcpp::traits::input_parameter< double >::type noConversionPeriod(noConversionPeriodSEXP );
        Rcpp::traits::input_parameter< double >::type americanConversionType(americanConversionTypeSEXP );
        Rcpp::traits::input_parameter< double >::type maturity(maturitySEXP );
        Rcpp::traits::input_parameter< double >::type faceValue(faceValueSEXP );
        Rcpp::traits::input_parameter< double >::type redemptionPremium(redemptionPremiumSEXP );
        Rcpp::traits::input_parameter< double >::type softCallStartTime(softCallStartTimeSEXP );
        Rcpp::traits::input_parameter< double >::type softCall(softCallSEXP );
        Rcpp::traits::input_parameter< double >::type softCallStrike(softCallStrikeSEXP );
        Rcpp::traits::input_parameter< double >::type putStartTime(putStartTimeSEXP );
        Rcpp::traits::input_parameter< double >::type putStrike(putStrikeSEXP );
        Rcpp::traits::input_parameter< double >::type callStartTime(callStartTimeSEXP );
        Rcpp::traits::input_parameter< double >::type callStrike(callStrikeSEXP );
        Rcpp::traits::input_parameter< double >::type nbStepsPerYear(nbStepsPerYearSEXP );
        Rcpp::traits::input_parameter< double >::type targetBondPrice(targetBondPriceSEXP );
        double __result = CBfindCoupon(S_0, sigma, intRate0, creditSpread, rateCompounding, couponFreq, dividendProtectionRate, RDividendSchedule, conversionRatio, noConversionPeriod, americanConversionType, maturity, faceValue, redemptionPremium, softCallStartTime, softCall, softCallStrike, putStartTime, putStrike, callStartTime, callStrike, nbStepsPerYear, targetBondPrice);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
